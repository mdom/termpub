#!/usr/bin/perl

use strict;
use warnings;
use Mojo::Util qw(decode encode html_unescape dumper);
use Curses;
use POSIX qw(ceil);

use lib 'lib';
use App::termpub;
use App::termpub::Epub;

initscr;
noecho;
cbreak;
keypad(1);
curs_set(0);

for my $filename (@ARGV) {

    my $epub = eval { App::termpub::Epub->new( filename => $filename ) };

    if ( !$epub ) {
        warn "$@\n";
        next;
    }

    App::termpub->new( epub => $epub )->run;
}

END {
    endwin;
}

sub select_line {
    my ( $position, @lines ) = @_;
    my ( $rows, $columns );
    getmaxyx( stdscr, $rows, $columns );
    my $len      = @lines;
    my $page     = 0;
    my $max_page = ceil( @lines / $rows ) - 1;

    my @current_lines;
    my $old_page     = -1;
    my $old_position = $position;

    while (1) {
        if ( $old_page != $page ) {
            @current_lines = @lines[
              ( $page * $rows ) .. (
                    $page == $max_page
                  ? $#lines
                  : ( $page * $rows + $rows - 1 )
              )
            ];
            clear;
            addstring( 0, 0, join( "\n", @current_lines ) );
            $old_page = $page;
        }

        if ( $old_position != $position ) {
            move( $old_position, 0 );
            clrtoeol;
            addstring( $current_lines[$old_position] . "\n" );
            $old_position = $position;
        }

        move( $position, 0 );
        clrtoeol;
        attron(A_REVERSE);
        addstring( $current_lines[$position] . "\n" );
        attroff(A_REVERSE);

        refresh;

        my $c = getchar;
        if ( $c eq KEY_NPAGE ) {
            if ( $page < $max_page ) {
                $position = 0;
                $page++;
            }
        }
        elsif ( $c eq KEY_PPAGE ) {
            if ( $page > 0 ) {
                $position = 0;
                $page--;
            }
        }
        elsif ( $c eq KEY_DOWN ) {
            if ( $position < @current_lines - 1 ) {
                $position++;
            }
            else {
                if ( $page != $max_page ) {
                    $position = 0;
                    $page++;
                }
            }
        }
        elsif ( $c eq KEY_UP ) {
            if ( $position != 0 ) {
                $position--;
            }
            else {
                if ( $page != 0 ) {
                    $position = $rows - 1;
                    $page--;
                }
            }
        }
        elsif ( $c eq "\n" ) {
            return $position;
        }
        elsif ( $c eq 'q' ) {
            return;
        }
    }

    return;
}

exit 0;

__END__

=pod

=head1 NAME

App::termpub - read epubs in the terminal

=head1 SYNOPSIS

termpub I<file>...

=head1 DESCRIPTION

termpub is a I<terminal> viewer for epubs.

=head1 KEY BINDINGS

=over 4

=item n

Go to the next chapter.

=item p

Go to the previos chapter.

=item KEY_DOWN, SPACE

Scroll down.

=item KEY_UP

Scroll up.

=item q

Quit.

=back

=head1 COPYRIGHT AND LICENSE 

Copyright 2019 Mario Domgoergen C<< <mario@domgoergen.com> >> 

This program is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation, either version 3 of the License, or 
(at your option) any later version. 

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
GNU General Public License for more details. 

You should have received a copy of the GNU General Public License 
along with this program.  If not, see <http://www.gnu.org/licenses/>. 


